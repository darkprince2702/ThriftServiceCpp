/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "profileservice_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace profileservice {


GetResult::~GetResult() throw() {
}


void GetResult::__set_isNull(const bool val) {
  this->isNull = val;
}

void GetResult::__set_value(const std::string& val) {
  this->value = val;
__isset.value = true;
}

uint32_t GetResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isNull = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isNull);
          isset_isNull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isNull)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetResult");

  xfer += oprot->writeFieldBegin("isNull", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isNull);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetResult &a, GetResult &b) {
  using ::std::swap;
  swap(a.isNull, b.isNull);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

GetResult::GetResult(const GetResult& other0) {
  isNull = other0.isNull;
  value = other0.value;
  __isset = other0.__isset;
}
GetResult& GetResult::operator=(const GetResult& other1) {
  isNull = other1.isNull;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void GetResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetResult(";
  out << "isNull=" << to_string(isNull);
  out << ", " << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}

} // namespace
