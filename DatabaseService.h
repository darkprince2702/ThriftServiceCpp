/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DatabaseService_H
#define DatabaseService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "databaseservice_types.h"

namespace databaseservice {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DatabaseServiceIf {
 public:
  virtual ~DatabaseServiceIf() {}
  virtual bool hasData(const std::string& key) = 0;
  virtual void getData(GetResult& _return, const std::string& key) = 0;
  virtual bool setData(const std::string& key, const std::string& value) = 0;
  virtual bool removeData(const std::string& key) = 0;
};

class DatabaseServiceIfFactory {
 public:
  typedef DatabaseServiceIf Handler;

  virtual ~DatabaseServiceIfFactory() {}

  virtual DatabaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DatabaseServiceIf* /* handler */) = 0;
};

class DatabaseServiceIfSingletonFactory : virtual public DatabaseServiceIfFactory {
 public:
  DatabaseServiceIfSingletonFactory(const boost::shared_ptr<DatabaseServiceIf>& iface) : iface_(iface) {}
  virtual ~DatabaseServiceIfSingletonFactory() {}

  virtual DatabaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DatabaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DatabaseServiceIf> iface_;
};

class DatabaseServiceNull : virtual public DatabaseServiceIf {
 public:
  virtual ~DatabaseServiceNull() {}
  bool hasData(const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  void getData(GetResult& /* _return */, const std::string& /* key */) {
    return;
  }
  bool setData(const std::string& /* key */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  bool removeData(const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _DatabaseService_hasData_args__isset {
  _DatabaseService_hasData_args__isset() : key(false) {}
  bool key :1;
} _DatabaseService_hasData_args__isset;

class DatabaseService_hasData_args {
 public:

  DatabaseService_hasData_args(const DatabaseService_hasData_args&);
  DatabaseService_hasData_args& operator=(const DatabaseService_hasData_args&);
  DatabaseService_hasData_args() : key() {
  }

  virtual ~DatabaseService_hasData_args() throw();
  std::string key;

  _DatabaseService_hasData_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const DatabaseService_hasData_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_hasData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_hasData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_hasData_pargs {
 public:


  virtual ~DatabaseService_hasData_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_hasData_result__isset {
  _DatabaseService_hasData_result__isset() : success(false) {}
  bool success :1;
} _DatabaseService_hasData_result__isset;

class DatabaseService_hasData_result {
 public:

  DatabaseService_hasData_result(const DatabaseService_hasData_result&);
  DatabaseService_hasData_result& operator=(const DatabaseService_hasData_result&);
  DatabaseService_hasData_result() : success(0) {
  }

  virtual ~DatabaseService_hasData_result() throw();
  bool success;

  _DatabaseService_hasData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DatabaseService_hasData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_hasData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_hasData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_hasData_presult__isset {
  _DatabaseService_hasData_presult__isset() : success(false) {}
  bool success :1;
} _DatabaseService_hasData_presult__isset;

class DatabaseService_hasData_presult {
 public:


  virtual ~DatabaseService_hasData_presult() throw();
  bool* success;

  _DatabaseService_hasData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_getData_args__isset {
  _DatabaseService_getData_args__isset() : key(false) {}
  bool key :1;
} _DatabaseService_getData_args__isset;

class DatabaseService_getData_args {
 public:

  DatabaseService_getData_args(const DatabaseService_getData_args&);
  DatabaseService_getData_args& operator=(const DatabaseService_getData_args&);
  DatabaseService_getData_args() : key() {
  }

  virtual ~DatabaseService_getData_args() throw();
  std::string key;

  _DatabaseService_getData_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const DatabaseService_getData_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_getData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_getData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_getData_pargs {
 public:


  virtual ~DatabaseService_getData_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_getData_result__isset {
  _DatabaseService_getData_result__isset() : success(false) {}
  bool success :1;
} _DatabaseService_getData_result__isset;

class DatabaseService_getData_result {
 public:

  DatabaseService_getData_result(const DatabaseService_getData_result&);
  DatabaseService_getData_result& operator=(const DatabaseService_getData_result&);
  DatabaseService_getData_result() {
  }

  virtual ~DatabaseService_getData_result() throw();
  GetResult success;

  _DatabaseService_getData_result__isset __isset;

  void __set_success(const GetResult& val);

  bool operator == (const DatabaseService_getData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_getData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_getData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_getData_presult__isset {
  _DatabaseService_getData_presult__isset() : success(false) {}
  bool success :1;
} _DatabaseService_getData_presult__isset;

class DatabaseService_getData_presult {
 public:


  virtual ~DatabaseService_getData_presult() throw();
  GetResult* success;

  _DatabaseService_getData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_setData_args__isset {
  _DatabaseService_setData_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _DatabaseService_setData_args__isset;

class DatabaseService_setData_args {
 public:

  DatabaseService_setData_args(const DatabaseService_setData_args&);
  DatabaseService_setData_args& operator=(const DatabaseService_setData_args&);
  DatabaseService_setData_args() : key(), value() {
  }

  virtual ~DatabaseService_setData_args() throw();
  std::string key;
  std::string value;

  _DatabaseService_setData_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const DatabaseService_setData_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_setData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_setData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_setData_pargs {
 public:


  virtual ~DatabaseService_setData_pargs() throw();
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_setData_result__isset {
  _DatabaseService_setData_result__isset() : success(false) {}
  bool success :1;
} _DatabaseService_setData_result__isset;

class DatabaseService_setData_result {
 public:

  DatabaseService_setData_result(const DatabaseService_setData_result&);
  DatabaseService_setData_result& operator=(const DatabaseService_setData_result&);
  DatabaseService_setData_result() : success(0) {
  }

  virtual ~DatabaseService_setData_result() throw();
  bool success;

  _DatabaseService_setData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DatabaseService_setData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_setData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_setData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_setData_presult__isset {
  _DatabaseService_setData_presult__isset() : success(false) {}
  bool success :1;
} _DatabaseService_setData_presult__isset;

class DatabaseService_setData_presult {
 public:


  virtual ~DatabaseService_setData_presult() throw();
  bool* success;

  _DatabaseService_setData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_removeData_args__isset {
  _DatabaseService_removeData_args__isset() : key(false) {}
  bool key :1;
} _DatabaseService_removeData_args__isset;

class DatabaseService_removeData_args {
 public:

  DatabaseService_removeData_args(const DatabaseService_removeData_args&);
  DatabaseService_removeData_args& operator=(const DatabaseService_removeData_args&);
  DatabaseService_removeData_args() : key() {
  }

  virtual ~DatabaseService_removeData_args() throw();
  std::string key;

  _DatabaseService_removeData_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const DatabaseService_removeData_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_removeData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_removeData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_removeData_pargs {
 public:


  virtual ~DatabaseService_removeData_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_removeData_result__isset {
  _DatabaseService_removeData_result__isset() : success(false) {}
  bool success :1;
} _DatabaseService_removeData_result__isset;

class DatabaseService_removeData_result {
 public:

  DatabaseService_removeData_result(const DatabaseService_removeData_result&);
  DatabaseService_removeData_result& operator=(const DatabaseService_removeData_result&);
  DatabaseService_removeData_result() : success(0) {
  }

  virtual ~DatabaseService_removeData_result() throw();
  bool success;

  _DatabaseService_removeData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DatabaseService_removeData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_removeData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_removeData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_removeData_presult__isset {
  _DatabaseService_removeData_presult__isset() : success(false) {}
  bool success :1;
} _DatabaseService_removeData_presult__isset;

class DatabaseService_removeData_presult {
 public:


  virtual ~DatabaseService_removeData_presult() throw();
  bool* success;

  _DatabaseService_removeData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DatabaseServiceClient : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DatabaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool hasData(const std::string& key);
  void send_hasData(const std::string& key);
  bool recv_hasData();
  void getData(GetResult& _return, const std::string& key);
  void send_getData(const std::string& key);
  void recv_getData(GetResult& _return);
  bool setData(const std::string& key, const std::string& value);
  void send_setData(const std::string& key, const std::string& value);
  bool recv_setData();
  bool removeData(const std::string& key);
  void send_removeData(const std::string& key);
  bool recv_removeData();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DatabaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DatabaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DatabaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_hasData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DatabaseServiceProcessor(boost::shared_ptr<DatabaseServiceIf> iface) :
    iface_(iface) {
    processMap_["hasData"] = &DatabaseServiceProcessor::process_hasData;
    processMap_["getData"] = &DatabaseServiceProcessor::process_getData;
    processMap_["setData"] = &DatabaseServiceProcessor::process_setData;
    processMap_["removeData"] = &DatabaseServiceProcessor::process_removeData;
  }

  virtual ~DatabaseServiceProcessor() {}
};

class DatabaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DatabaseServiceProcessorFactory(const ::boost::shared_ptr< DatabaseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DatabaseServiceIfFactory > handlerFactory_;
};

class DatabaseServiceMultiface : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceMultiface(std::vector<boost::shared_ptr<DatabaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DatabaseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DatabaseServiceIf> > ifaces_;
  DatabaseServiceMultiface() {}
  void add(boost::shared_ptr<DatabaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool hasData(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hasData(key);
    }
    return ifaces_[i]->hasData(key);
  }

  void getData(GetResult& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getData(_return, key);
    }
    ifaces_[i]->getData(_return, key);
    return;
  }

  bool setData(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setData(key, value);
    }
    return ifaces_[i]->setData(key, value);
  }

  bool removeData(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeData(key);
    }
    return ifaces_[i]->removeData(key);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DatabaseServiceConcurrentClient : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DatabaseServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool hasData(const std::string& key);
  int32_t send_hasData(const std::string& key);
  bool recv_hasData(const int32_t seqid);
  void getData(GetResult& _return, const std::string& key);
  int32_t send_getData(const std::string& key);
  void recv_getData(GetResult& _return, const int32_t seqid);
  bool setData(const std::string& key, const std::string& value);
  int32_t send_setData(const std::string& key, const std::string& value);
  bool recv_setData(const int32_t seqid);
  bool removeData(const std::string& key);
  int32_t send_removeData(const std::string& key);
  bool recv_removeData(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
